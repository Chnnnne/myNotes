#include<stdio.h>
//////////////////////////////////////////////////////////////////////////////////////////////
//					广义快速幂
/*


知识：
幺元，任何元与之运算后，结果不变，类似于单位元的性质，例如整数乘法中的1
零元，就是任何元与之运算后，结果都变成这个零元，例如整数乘法中的0
逆元，就是与元运算后得到么元，例如整数加法中，单位元是0，14的逆元是-14（因为-14+14=0） 


前提条件：V群 、 ○为一种运算  、  ○运算的幺元是e 

底数a关于  ○运算符号	的b次幂可以这样写							记忆：4个a 、3个b 
 
 返回值类型 函数名(幂运算的底数a,幂运算的次数b)  底数的类型可能是数字也可能是一个方阵，次数是数字类型 
 {
 	int res=e;
	 while(b)
	 {
	 	if(b&1)
	 		res=res ○a；
		a=a ○a;
		b>>=1; 
	 } 
	 
	 return res;
 } 


*/
//////////////////////////////////////////////////////////////////////////////////////////
//快速乘方       运算符是* 、幺元是1 、  底数a 、  *运算n次   （也即乘方） 
long long quick_power(long long a,long long b,long long Mod) {
    long long res = 1;
    while (b) 
	{
        if (b&1) 
            res=res*a%Mod;
        a=(a*a)%Mod;
        b>>=1;
    }
    return res;
}


//快速乘法		运算符是+ 、幺元是0 、  底数a 、  +运算n次	（也即乘法） 
long long quick_mul(long long a,long long b,long long Mod) 
{
	long long res=0;
	while(b)
	{
		if(b&1)
			res=(res+a)%Mod;
		a=(a+a)%Mod;
		b>>=1;
	}
	return res;	
}
//////////////////////////////////////////////////////////////////////////////////////


int main()
{
	printf("%lld",quick_power(2,10,10000));
	
	return 0;
 } 
